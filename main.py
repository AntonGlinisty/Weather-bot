import telebot
from telebot import types
import requests
import datetime
from config import token, open_weather_token

bot = telebot.TeleBot(token)
lat = 0
lon = 0

@bot.message_handler(commands=["start"])
def start_command(message):
    markup = markmainmenu()
    bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! –ü—Ä—è–º–æ —Å–µ–π—á–∞—Å –≤—ã —Å–º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É –≤ –ª—é–±–æ–π —Ç–æ—á–∫–µ –º–∏—Ä–∞!!! ", reply_markup=markup)

@bot.message_handler(content_types=["text"])
def bot_message(message):
    print(message)
    print(message.text)
    if message.text == 'üå• –ü–æ–≥–æ–¥–∞':
        messweth(message)
    elif message.text == 'üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è':
        messinfo(message)
    elif message.text == '–ü–æ–≥–æ–¥–∞ –ø–æ —à–∏—Ä–æ—Ç–µ –∏ –¥–æ–ª–≥–æ—Ç–µ':
        messlat(message)
    elif message.text == '–ü–æ–≥–æ–¥–∞ –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –≥–æ—Ä–æ–¥–µ':
        messcity(message)
    elif message.text == '‚¨Ö –ù–∞–∑–∞–¥':
        messback(message)
    else:
        messunknown(message)

def messweth(message):
    markup = markmainweath()
    bot.send_message(message.chat.id, 'üå• –ü–æ–≥–æ–¥–∞', reply_markup=markup)

def messinfo(message):
    text = info()
    bot.send_message(message.chat.id, text)

def messlat(message):
    markup = markback()
    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —à–∏—Ä–æ—Ç—É: ', reply_markup=markup)
    bot.register_next_step_handler(message, lat_input)

def messcity(message):
    markup = markback()
    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥: ', reply_markup=markup)
    bot.register_next_step_handler(message, city_input)

def messback(message):
    markup = markmainmenu()
    bot.send_message(message.chat.id, '‚¨Ö –ù–∞–∑–∞–¥', reply_markup=markup)

def messunknown(message):
    bot.send_message(message.chat.id, '–ù–µ—Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞')

def markmainmenu():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton('üå• –ü–æ–≥–æ–¥–∞')
    item2 = types.KeyboardButton('üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')
    markup.add(item1, item2)
    return markup

def markmainweath():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton('–ü–æ–≥–æ–¥–∞ –ø–æ —à–∏—Ä–æ—Ç–µ –∏ –¥–æ–ª–≥–æ—Ç–µ')
    item2 = types.KeyboardButton('–ü–æ–≥–æ–¥–∞ –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –≥–æ—Ä–æ–¥–µ')
    item3 = types.KeyboardButton('‚¨Ö –ù–∞–∑–∞–¥')
    markup.add(item1, item2, item3)
    return markup

def markback():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton('‚¨Ö –ù–∞–∑–∞–¥')
    markup.add(item1)
    return markup

def info():
    text = ''
    with open('info.txt', 'r', encoding='utf_8') as file:
        for lines in file.readlines():
            text += lines
    return text

def emojes():
    smiles = {
        "Clear": "–Ø—Å–Ω–æ \U00002600",
        "Clouds": "–û–±–ª–∞—á–Ω–æ \U00002601",
        "Rain": "–î–æ–∂–¥—å \U00002614",
        "Drizzle": "–î–æ–∂–¥—å \U00002614",
        "Thunderstorm": "–ì—Ä–æ–∑–∞ \U000026A1",
        "Snow": "–°–Ω–µ–≥ \U0001F328",
        "Mist": "–¢—É–º–∞–Ω \U0001F32B"
    }
    return smiles

def weatheroutput(data, message, smiles):
    cur_weather = data["main"]["temp"]
    weather_description = data["weather"][0]["main"]
    if weather_description in smiles:
        wd = smiles[weather_description]
    else:
        wd = "–ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –≤ –æ–∫–Ω–æ, –Ω–µ –ø–æ–π–º—É —á—Ç–æ —Ç–∞–º –∑–∞ –ø–æ–≥–æ–¥–∞!"
    humidity = data["main"]["humidity"]
    pressure = data["main"]["pressure"]
    wind = data["wind"]["speed"]
    sunrise_timestamp = datetime.datetime.fromtimestamp(data["sys"]["sunrise"])
    sunset_timestamp = datetime.datetime.fromtimestamp(data["sys"]["sunset"])
    length_of_the_day = datetime.datetime.fromtimestamp(data["sys"]["sunset"]) - datetime.datetime.fromtimestamp(
        data["sys"]["sunrise"])
    markup = markmainmenu()
    bot.send_message(message.chat.id, f"***{datetime.datetime.now().strftime('%Y-%m-%d %H:%M')}***\n\n"
                                      f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {cur_weather}C¬∞ {wd}\n–í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\n"
                                      f"–î–∞–≤–ª–µ–Ω–∏–µ: {pressure} –º–º.—Ä—Ç.—Å—Ç\n"
                                      f"–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: {wind} –º/—Å\n–í–æ—Å—Ö–æ–¥ —Å–æ–ª–Ω—Ü–∞: {sunrise_timestamp}\n"
                                      f"–ó–∞–∫–∞—Ç —Å–æ–ª–Ω—Ü–∞: {sunset_timestamp}\n"
                                      f"–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–Ω—è: {length_of_the_day}\n\n***–û–¥–µ–≤–∞–π—Ç–µ—Å—å –ø–æ –ø–æ–≥–æ–¥–µ!***",
                     reply_markup=markup)

@bot.message_handler()
def lat_input(message):
    try:
        int(message.text)
        if -90 <= int(message.text) <= 90:
            global lat
            lat = message.text
            bot.send_message(message.chat.id, "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –¥–æ–ª–≥–æ—Ç—É: ")
            bot.register_next_step_handler(message, lon_input)
        else:
            if message.text == '‚¨Ö –ù–∞–∑–∞–¥':
                message.text = 'üå• –ü–æ–≥–æ–¥–∞'
                bot_message(message)
            else:
                bot.send_message(message.chat.id, "–®–∏—Ä–æ—Ç–∞ –∏–∑–º–µ–Ω—è–µ—Ç—Å—è –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö [-90, 90]\n–í–≤–µ–¥–∏—Ç–µ —à–∏—Ä–æ—Ç—É: ")
                bot.register_next_step_handler(message, lat_input)
    except:
        if message.text == '‚¨Ö –ù–∞–∑–∞–¥':
            message.text = 'üå• –ü–æ–≥–æ–¥–∞'
            bot_message(message)
        else:
            bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ: ")
            bot.register_next_step_handler(message, lat_input)

@bot.message_handler()
def lon_input(message):
    try:
        int(message.text)
        if -180 <= int(message.text) <= 180:
            global lon
            lon = message.text
            result(message)
        else:
            if message.text == '‚¨Ö –ù–∞–∑–∞–¥':
                message.text = '–ü–æ–≥–æ–¥–∞ –ø–æ —à–∏—Ä–æ—Ç–µ –∏ –¥–æ–ª–≥–æ—Ç–µ'
                bot_message(message)
            else:
                bot.send_message(message.chat.id, "–î–æ–ª–≥–æ—Ç–∞ –∏–∑–º–µ–Ω—è–µ—Ç—Å—è –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö [-180, 180]\n–í–≤–µ–¥–∏—Ç–µ –¥–æ–ª–≥–æ—Ç—É: ")
                bot.register_next_step_handler(message, lon_input)
    except:
        if message.text == '‚¨Ö –ù–∞–∑–∞–¥':
            message.text = '–ü–æ–≥–æ–¥–∞ –ø–æ —à–∏—Ä–æ—Ç–µ –∏ –¥–æ–ª–≥–æ—Ç–µ'
            bot_message(message)
        else:
            bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ: ")
            bot.register_next_step_handler(message, lon_input)

@bot.message_handler()
def city_input(message):
    try:
        global lat, lon
        r = requests.get(f"http://api.openweathermap.org/geo/1.0/direct?q={message.text}"
                         f"&limit=1&appid={open_weather_token}")
        data = r.json()
        lat = data[0]["lat"]
        lon = data[0]["lon"]
        result(message)
    except:
        if message.text == '‚¨Ö –ù–∞–∑–∞–¥':
            message.text = 'üå• –ü–æ–≥–æ–¥–∞'
            bot_message(message)
        else:
            bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞: ")
            bot.register_next_step_handler(message, city_input)

def result(message):
    smiles = emojes()
    try:
        global lat, lon
        r = requests.get(
            f"https://api.openweathermap.org/data/2.5/weather?lat={lat}"
            f"&lon={lon}&appid={open_weather_token}&units=metric"
        )
        data = r.json()
        weatheroutput(data, message, smiles)
    except:
        bot.send_message(message.chat.id, "\U00002620 –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö \U00002620")

bot.polling(none_stop=True)